-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;

CREATE TABLE IF NOT EXISTS auth.company
(
    id bigserial NOT NULL,
    name character varying(225) COLLATE pg_catalog."default" NOT NULL,
    nit_code character varying(225) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT company_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS auth.contract
(
    id bigserial NOT NULL,
    company_id bigint NOT NULL,
    employee_id bigint NOT NULL,
    is_active boolean NOT NULL DEFAULT true,
    start_date timestamp with time zone NOT NULL,
    end_date time with time zone,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT contract_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS auth."docType"
(
    id bigserial NOT NULL,
    "docType" character varying(225) COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT "docType_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS auth.employee
(
    id bigserial NOT NULL,
    name character varying(225) COLLATE pg_catalog."default" NOT NULL,
    "lastName" character varying(225) COLLATE pg_catalog."default" NOT NULL,
    "secondLastName" character varying(225) COLLATE pg_catalog."default" NOT NULL,
    birth_date timestamp with time zone NOT NULL,
    email character varying(225) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(225) COLLATE pg_catalog."default" NOT NULL,
    "docType_id" bigint NOT NULL,
    "docNum" numeric NOT NULL,
    "employeeRole_id" bigint NOT NULL,
    "employeeCode" character varying(225) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT employee_pkey PRIMARY KEY (id),
    CONSTRAINT email_uq UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS auth.employee_role
(
    id bigserial NOT NULL,
    "employeeRole" character varying(225) COLLATE pg_catalog."default" NOT NULL,
    created_at character varying COLLATE pg_catalog."default" NOT NULL DEFAULT now(),
    updated_at character varying COLLATE pg_catalog."default" NOT NULL DEFAULT now(),
    CONSTRAINT employee_role_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS auth.payment_status
(
    id bigserial NOT NULL,
    status character varying[] COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT payment_status_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS auth.payments
(
    id bigserial NOT NULL,
    suscription_id bigint NOT NULL,
    payment_date timestamp with time zone NOT NULL,
    amount numeric NOT NULL DEFAULT 0,
    "paymentStatus_id" bigint NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT payments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS auth.plan
(
    id bigserial NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    price numeric NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT plan_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS auth.profile
(
    id bigserial NOT NULL,
    "userRole_id" bigint NOT NULL,
    name character varying(225) COLLATE pg_catalog."default" NOT NULL,
    "lastName" character varying(225) COLLATE pg_catalog."default" NOT NULL,
    "secondLastName" character varying(225) COLLATE pg_catalog."default" NOT NULL,
    birth_date timestamp with time zone NOT NULL,
    phone character varying[] COLLATE pg_catalog."default" NOT NULL,
    "countryCode" character varying COLLATE pg_catalog."default",
    "cityCode" character varying COLLATE pg_catalog."default",
    email character varying[] COLLATE pg_catalog."default" NOT NULL,
    "docType_id" bigint NOT NULL,
    "docNum" numeric NOT NULL,
    "nitCode" character varying(225) COLLATE pg_catalog."default" NOT NULL,
    "employeeCode" character varying COLLATE pg_catalog."default",
    username character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT profile_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS auth.suscription
(
    id bigserial NOT NULL,
    company_id bigint NOT NULL,
    plan_id bigint NOT NULL,
    is_active boolean NOT NULL DEFAULT true,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT suscription_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS auth.user_role
(
    id bigserial NOT NULL,
    role character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT user_role_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS auth.contract
    ADD CONSTRAINT company_id_fk FOREIGN KEY (company_id)
    REFERENCES auth.company (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS auth.contract
    ADD CONSTRAINT employee_id_fk FOREIGN KEY (employee_id)
    REFERENCES auth.employee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS auth.employee
    ADD CONSTRAINT "docType_id_fk" FOREIGN KEY ("docType_id")
    REFERENCES auth."docType" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS auth.employee
    ADD CONSTRAINT "employeeRole_id_fk" FOREIGN KEY ("employeeRole_id")
    REFERENCES auth.employee_role (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS auth.payments
    ADD CONSTRAINT "paymentStatus_id_fk" FOREIGN KEY ("paymentStatus_id")
    REFERENCES auth.payment_status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS auth.payments
    ADD CONSTRAINT suscription_id_fk FOREIGN KEY (suscription_id)
    REFERENCES auth.suscription (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS auth.profile
    ADD CONSTRAINT "docType_id_fk" FOREIGN KEY ("docType_id")
    REFERENCES auth."docType" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS auth.profile
    ADD CONSTRAINT "userRole_id_fk" FOREIGN KEY ("userRole_id")
    REFERENCES auth.user_role (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS auth.suscription
    ADD CONSTRAINT company_id_fk FOREIGN KEY (company_id)
    REFERENCES auth.company (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS auth.suscription
    ADD CONSTRAINT plan_id_fk FOREIGN KEY (plan_id)
    REFERENCES auth.plan (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;